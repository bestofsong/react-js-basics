## Promise
```js
const p0 = new Promise((resolve, reject) => {
  do_sth_maybe_async((err, res) => {
    if (err) {
      reject(err);
    } else {
      resolve(res);
    }
  });
});

const p1 = p0.then(f1);
const p2 = p0.then(f2);

const p4 = p0.then(f4);
const p5 = p4.then(f5);
```

![示意图](promise/test_diagram.svg)

## Generator

```js
const generatorFunc = function* generatorFunc() {
  const v1 = yield 1;
  console.log('from outside: ', v1);

  const v2 = yield 2;
  console.log('from outside: ', v2);

  const v3 = yield 3;
  console.log('from outside: ', v3);
}

const generatorObj = generatorFunc();
console.log('from inside: ', generatorObj.next().value);
console.log('from inside: ', generatorObj.next(11).value);
console.log('from inside: ', generatorObj.next(12).value);
console.log('from inside: ', generatorObj.next(13).value);

```

## 协程：yield promise

```js
const delay = (ms, v) =>
  new Promise(resolve =>
    setTimeout(() => resolve(v), ms));
const asyncWork1 = () => delay(1000, 'work1 result');
const asyncWork2 = () => delay(1000, 'work2 result');

function* doWorks() {
  try {
    const res1 = yield asyncWork1()
    console.log(res1);
  } catch (e) {
    console.log('error: ', e);
    return;
  }

  try {
    const res2 = yield asyncWork2()
    console.log(res2);
  } catch (e) {
    console.log('error: ', e);
    return;
  }
}

function co(func, ...args) {
  coImp(func(...args))
}

function coImp(g, value = undefined) {
  const it = g.next(value);
  if (it.done) {
    return;
  }
  Promise.resolve(it.value)
    .then(v => coImp(g, v));
}

```

## async/await
* 基于generator实现

```js
  async purchase(callback) {
    const { iapRecordVendor, productId, isLoggedIn } = this.ctx;
    const { savePayRecord, removePayRecord, getPayRecord } = iapRecordVendor;
    // 先检查已保存的记录
    let rec = null;
    try {
      rec = await getPayRecord.call(iapRecordVendor, productId);
    } catch (e) {
      console.error('getPayRecord failed, should not happen: ', e);
    }

    if (rec) {
      if (rec.length !== 2) {
        throw new Error('invalid pay record');
      }

      if (!isLoggedIn) {
        return { code: 'RC_IAP_DID_SAVE_REC' };
      }

      let ret = null;
      try {
        ret = await callback({ product: rec[0], payment: rec[1], isRestored: true });
      } catch (e) {
        console.error(e);
        return { code: 'RC_IAP_CALLBACK', error: e };
      }

      if (ret.code !== 'RC_OK') {
        return { code: 'RC_IAP_CALLBACK' };
      }

      try {
        await removePayRecord.call(iapRecordVendor, productId);
      } catch (e) {
        // fixme: any better way to handle this
        console.error('removePayRecord failed, should not happen: ', e);
      }
      return ret;
    }

    let appStoreProduct = null;
    try {
      appStoreProduct = await this.getProduct();
    } catch (e) {
      console.error(e);
      return { code: 'RC_IAP_GET_PRODUCT', error: e };
    }

    if (!appStoreProduct) {
      return { code: 'RC_IAP_GET_PRODUCT' };
    }

    let payment = null;
    try {
      payment = await this.iapPay();
    } catch (e) {
      console.error(e);
      return { code: 'RC_IAP_PURCHASE', error: e };
    }

    if (!payment) {
      return { code: 'RC_IAP_PURCHASE' };
    }

    let callbackRes = null;
    let errorRc = '';
    try {
      callbackRes = await callback({ product: appStoreProduct, payment });
    } catch (e) {
      console.error(e);
      if (e && e.code) {
        errorRc = e.code;
      }
    }

    const { code, ...rest } = callbackRes || {};
    if (isLoggedIn && code === 'RC_OK') {
      return callbackRes;
    }

    // 提交失败了，或未登录
    try {
      await savePayRecord.call(iapRecordVendor, appStoreProduct, payment);
      return {
        ...rest,
        code: isLoggedIn ? (code || errorRc || 'RC_IAP_CALLBACK') : 'RC_IAP_DID_SAVE_REC',
      };
    } catch (e) {
      console.error(e);
      return { code: 'RC_IAP_SAVE_REC', error: e };
    }
  }
```

## redux
![redux](redux/redux.svg)

## redux-saga
* 基于generator
* 副作用（effect）
    *  take: 等待action发出
    *  put: 发起一个action
    *  select: 返回redux store
    *  call/fork: 同步/异步调用

```js
// 商品列表加载成功之后，获取对应的App Store数据
export const watchRealExamCourseList = function* watchRealExamCourseList() {
  for (;;) {
    const { payload } = yield take(actions.realGetExamCourseList.success);
    if (!isIOS) continue;
    const { data } = payload;
    const productIds = (data || []).reduce((res, it) => {
      if (!it) return res;
      const { products } = it;
      if (!products) return res;
      return res.concat(products.map(p => p.id));
    }, []);

    yield call(getCoursesFromAppstore, productIds);
  }
};

```


```js
// 退出登录后，清除用户相关的数据
export const watchClearAccount = function* watchClearAccount() {
  for (;;) {
    yield take(actions.clearAccount);
    try {
      yield call(storeAccount, {});
      yield put(orderActions.purchaseState({}));
      yield put(orderActions.realGetOrderList.reset({}));
      yield put(orderActions.realCancelOrder.reset({}));
      yield put(orderActions.realPostOrder.reset({}));
      yield put(courseActions.realGetCourseStatus.reset({}));
      yield put(courseActions.realPutCourseStudyStatus.reset({}));
      yield put(courseActions.realGetMyCourseCards.reset({}));
      yield put(courseActions.realGetMyCourseList.reset({}));
      yield put(courseActions.realGetCourse.reset({}));
      yield put(userActions.realGetStudyData.reset({}));
    } catch (e) {
      console.error('saga failed to clearAccount, error: ', e);
    }
  }
};


```


```js
// 支付成功后，刷新对应的页面：学习中心，课程详情页，订单列表页
export const watchPurchaseState = function* watchPurchaseState() {
  for (;;) {
    const { payload: { status, courseId } } = yield take(actions.purchaseState);
    if (status !== 'SUCCESS') {
      continue;
    }

    try {
      yield fork(put, courseActions.getMyCourseList());
      yield fork(put, courseActions.getCourse({ id: courseId }));
      yield fork(put, actions.getOrderList());
    } catch (e) {
      console.error(e);
    }
  }
};

```
